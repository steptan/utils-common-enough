#!/bin/bash
# Centralized setup script for git submodules across all projects
# This replaces individual setup-git-submodules.sh scripts in each project

set -e

# Detect project name from current directory or parent
PROJECT_NAME=""
CURRENT_DIR=$(pwd)

# Check if we're in a project directory with .git
if [ -d ".git" ] && [ -f ".gitmodules" ]; then
    PROJECT_NAME=$(basename "$CURRENT_DIR")
elif [ -d "../.git" ] && [ -f "../.gitmodules" ]; then
    # We might be inside utils submodule
    cd ..
    PROJECT_NAME=$(basename "$(pwd)")
else
    echo "‚ùå Error: Must be run from a project root directory with git submodules"
    echo "Please run from fraud-or-not, media-register, or people-cards directory"
    exit 1
fi

echo "üîß Setting up git submodules for $PROJECT_NAME..."

# Initialize and update submodules
echo "üì¶ Initializing and updating submodules..."
git submodule update --init --recursive

# Configure submodule to track master branch
if [ -f ".gitmodules" ]; then
    echo "üîó Configuring utils submodule to track master branch..."
    git config --file .gitmodules submodule.utils.branch master
    git config --file .gitmodules submodule.utils.update merge
fi

# Setup git aliases for submodule management
echo "üìù Setting up helpful git aliases..."
git config alias.update-subs '!git pull --recurse-submodules && git submodule update --recursive --remote'
git config alias.push-all '!git push && git submodule foreach "git push"'
git config alias.status-all '!git status && git submodule foreach "git status"'
git config alias.sall '!git status && echo "" && git submodule foreach "echo \"Submodule: \$path\" && git status -s && echo"'
git config alias.pullall '!git pull && git submodule update --remote --merge'
git config alias.addall '!git submodule foreach "git add -A" && git add -A'
git config alias.pushall '!f() { echo "Checking for submodule changes..."; git submodule foreach "git add -A && git diff-index --quiet HEAD -- || git commit -m \"Auto-commit from parent repo\" && git push || true"; echo "Committing parent repository..."; git add -A && git commit -m "$1" && git push; }; f'

# Setup local git configuration
echo "‚öôÔ∏è  Setting up local git configuration..."
git config --local submodule.recurse true
git config --local push.recurseSubmodules on-demand

# Setup pre-push hook
HOOKS_DIR=".git/hooks"
PRE_PUSH_HOOK="$HOOKS_DIR/pre-push"

echo "ü™ù Creating pre-push hook..."
mkdir -p "$HOOKS_DIR"

cat > "$PRE_PUSH_HOOK" << 'EOF'
#!/bin/bash
# Pre-push hook to check for unpushed submodule changes
# Auto-generated by utils/setup-git-submodules.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Checking submodules for unpushed changes..."

# Check if there are any submodules
if [ ! -f ".gitmodules" ]; then
    exit 0
fi

# Track if any errors occurred
ERROR=0

# Check each submodule
git submodule foreach --quiet '
    echo "Checking submodule: $name"
    
    # Check for uncommitted changes
    if [ -n "$(git status --porcelain)" ]; then
        echo -e "'$RED'‚ùå Error: Submodule $name has uncommitted changes'$NC'"
        echo "Please commit changes in the submodule first:"
        echo "  cd $sm_path"
        echo "  git add -A && git commit -m \"Your commit message\""
        exit 1
    fi
    
    # Check if there are unpushed commits
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u} 2>/dev/null || echo "")
    
    if [ -n "$REMOTE" ] && [ "$LOCAL" != "$REMOTE" ]; then
        echo -e "'$YELLOW'‚ö†Ô∏è  Warning: Submodule $name has unpushed commits'$NC'"
        echo "Attempting to push submodule changes..."
        
        # Try to push submodule
        if git push; then
            echo -e "'$GREEN'‚úÖ Successfully pushed submodule $name'$NC'"
        else
            echo -e "'$RED'‚ùå Failed to push submodule $name'$NC'"
            echo "Please push the submodule manually:"
            echo "  cd $sm_path"
            echo "  git push"
            exit 1
        fi
    fi
' || ERROR=1

if [ $ERROR -eq 1 ]; then
    exit 1
fi

# Check if submodule references have changed
SUBMODULES=$(git config --file .gitmodules --get-regexp path | awk '{print $2}')
if [ -n "$SUBMODULES" ]; then
    if ! git diff-index --quiet HEAD -- $SUBMODULES; then
        echo -e "${YELLOW}‚ö†Ô∏è  Submodule references have changed, these will be included in the push${NC}"
    fi
fi

echo -e "${GREEN}‚úÖ All submodules are clean and pushed${NC}"
EOF

chmod +x "$PRE_PUSH_HOOK"

echo "‚úÖ Git submodules setup complete for $PROJECT_NAME!"
echo ""
echo "üìö Available commands:"
echo "  git sall        - Show status of parent repo and all submodules"
echo "  git addall      - Add all changes in parent repo and submodules"
echo "  git pushall     - Commit and push parent repo and all submodules"
echo "  git pullall     - Pull parent repo and update all submodules"
echo "  git update-subs - Pull and update all submodules"
echo "  git push-all    - Push main repo and all submodules"
echo "  git status-all  - Check status of main repo and submodules"
echo ""
echo "The pre-push hook will automatically check submodules before pushing."
echo ""
echo "üí° Tip: You can now remove the local setup-git-submodules.sh from $PROJECT_NAME"
echo "   and use this centralized script from utils instead."