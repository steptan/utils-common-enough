[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "project-utils"
version = "1.0.0"
description = "Shared utilities for the media-register project"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Project Team", email = "team@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "boto3>=1.28.0",
    "botocore>=1.31.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "troposphere>=4.4.0",
    "requests>=2.31.0",
    "colorama>=0.2.5,<0.4.4",  # Match sceptre requirement
    "tabulate>=0.9.0",
    "python-dotenv>=1.0.0",
    "jsonschema>=4.0.0",
    "deepmerge>=1.1.0",
]

[project.scripts]
project-utils = "cli.__main__:cli"
project-deploy = "cli.deploy:main"
project-lambda = "cli.lambda_cmd:main"
project-test = "cli.test:main"
project-cfn = "cli.cloudformation:main"
project-db = "cli.database:main"
project-dynamodb = "cli.dynamodb:dynamodb"
project-git = "cli.git:main"
media-register-deploy = "cli.deploy_media_register:main"
media-register-validate = "cli.media_register_validate:main"
media-register-version = "cli.media_register_version:main"
git-submodule-setup = "scripts.git_submodules:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "flake8>=6.1.0",
    "moto>=4.2.0",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
project_utils = ["templates/*.yaml", "templates/*.json"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "troposphere.*",
    "moto.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.4"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug:",
    "if settings\\.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"