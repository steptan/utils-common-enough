#!/usr/bin/env python3
"""
Setup Git Submodules - Python replacement for setup-git-submodules.sh

Configures git submodules with proper tracking and hooks.
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path


class GitSubmoduleSetup:
    """Setup git submodule configuration"""

    def __init__(self, project_root: Path = None):
        self.project_root = project_root or Path.cwd()
        self.git_dir = self.project_root / ".git"
        self.hooks_dir = self.git_dir / "hooks"

    def create_pre_push_hook(self) -> bool:
        """Create pre-push hook for submodule checking"""
        print("Creating pre-push hook...")

        # Ensure hooks directory exists
        self.hooks_dir.mkdir(parents=True, exist_ok=True)

        hook_content = '''#!/usr/bin/env python3
"""
Pre-push hook to ensure submodule changes are pushed
Auto-generated by setup_git_submodules.py
"""

import subprocess
import sys
import os

# Colors for output
RED = '\\033[0;31m'
GREEN = '\\033[0;32m'
YELLOW = '\\033[1;33m'
NC = '\\033[0m'  # No Color

def check_submodules():
    """Check submodules for uncommitted or unpushed changes"""
    print("Checking submodules...")
    
    # Check if there are any submodules
    if not os.path.exists('.gitmodules'):
        return True
    
    # Get list of submodules
    try:
        result = subprocess.run(
            ['git', 'config', '--file', '.gitmodules', '--get-regexp', 'path'],
            capture_output=True, text=True
        )
        if result.returncode != 0:
            return True
        
        submodules = [line.split()[1] for line in result.stdout.strip().split('\\n') if line]
        
        for submodule in submodules:
            print(f"Checking submodule: {submodule}")
            
            if not os.path.exists(submodule):
                continue
            
            # Save current directory
            original_dir = os.getcwd()
            os.chdir(submodule)
            
            try:
                # Check for uncommitted changes
                result = subprocess.run(
                    ['git', 'diff-index', '--quiet', 'HEAD', '--'],
                    capture_output=True
                )
                if result.returncode != 0:
                    print(f"{RED}Error: Submodule '{submodule}' has uncommitted changes{NC}")
                    print("Please commit changes in the submodule first:")
                    print(f"  cd {submodule}")
                    print("  git add -A && git commit -m 'Your commit message'")
                    return False
                
                # Check for unpushed commits
                result = subprocess.run(
                    ['git', 'log', '@{u}..'],
                    capture_output=True, text=True
                )
                if result.stdout.strip():
                    print(f"{YELLOW}Warning: Submodule '{submodule}' has unpushed commits{NC}")
                    print("Attempting to push submodule changes...")
                    
                    # Try to push submodule
                    result = subprocess.run(['git', 'push'], capture_output=True)
                    if result.returncode != 0:
                        print(f"{RED}Failed to push submodule '{submodule}'{NC}")
                        print("Please push the submodule manually:")
                        print(f"  cd {submodule}")
                        print("  git push")
                        return False
                    
                    print(f"{GREEN}Successfully pushed submodule '{submodule}'{NC}")
                
            finally:
                os.chdir(original_dir)
        
        # Check if submodule references have changed
        result = subprocess.run(
            ['git', 'diff-index', '--quiet', 'HEAD', '--'] + submodules,
            capture_output=True
        )
        if result.returncode != 0:
            print(f"{YELLOW}Submodule references have changed, updating parent repository{NC}")
        
    except Exception as e:
        print(f"{RED}Error checking submodules: {e}{NC}")
        return False
    
    print(f"{GREEN}Submodule check complete{NC}")
    return True

if __name__ == "__main__":
    if not check_submodules():
        sys.exit(1)
    sys.exit(0)
'''

        hook_path = self.hooks_dir / "pre-push"
        with open(hook_path, "w") as f:
            f.write(hook_content)

        # Make executable
        hook_path.chmod(0o755)
        print(f"‚úÖ Created pre-push hook at {hook_path}")
        return True

    def setup_git_aliases(self) -> bool:
        """Setup useful git aliases for submodule management"""
        print("Setting up git aliases...")

        aliases = {
            "pushall": '!f() { echo "Checking for submodule changes..."; git submodule foreach "git add -A && git diff-index --quiet HEAD -- || git commit -m \\"Auto-commit from parent repo\\" && git push || true"; echo "Committing parent repository..."; git add -A && git commit -m "$1" && git push; }; f',
            "sall": '!git status && echo "" && git submodule foreach "echo \\"Submodule: $path\\" && git status -s && echo"',
            "pullall": "!git pull && git submodule update --remote --merge",
            "addall": '!git submodule foreach "git add -A" && git add -A',
        }

        try:
            for alias, command in aliases.items():
                subprocess.run(
                    ["git", "config", "--local", f"alias.{alias}", command], check=True
                )
                print(f"  ‚úÖ Added alias: git {alias}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"  ‚ùå Failed to set up aliases: {e}")
            return False

    def configure_submodule_tracking(self) -> bool:
        """Configure submodule to track branch"""
        print("Configuring submodule tracking...")

        if not (self.project_root / ".gitmodules").exists():
            print("  ‚ö†Ô∏è  No .gitmodules file found")
            return True

        try:
            # Configure utils submodule to track master branch
            subprocess.run(
                [
                    "git",
                    "config",
                    "--file",
                    ".gitmodules",
                    "submodule.utils.branch",
                    "master",
                ],
                check=True,
            )
            subprocess.run(
                [
                    "git",
                    "config",
                    "--file",
                    ".gitmodules",
                    "submodule.utils.update",
                    "merge",
                ],
                check=True,
            )
            print("  ‚úÖ Configured utils submodule to track master branch")
            return True
        except subprocess.CalledProcessError as e:
            print(f"  ‚ùå Failed to configure submodule: {e}")
            return False

    def setup_local_config(self) -> bool:
        """Setup local git configuration for submodules"""
        print("Setting up local git configuration...")

        configs = {"submodule.recurse": "true", "push.recurseSubmodules": "on-demand"}

        try:
            for key, value in configs.items():
                subprocess.run(["git", "config", "--local", key, value], check=True)
                print(f"  ‚úÖ Set {key} = {value}")
            return True
        except subprocess.CalledProcessError as e:
            print(f"  ‚ùå Failed to set configuration: {e}")
            return False

    def run_setup(self) -> bool:
        """Run complete setup"""
        print("üîß Git Submodule Configuration Setup")
        print("=" * 50)

        # Check if we're in a git repository
        if not self.git_dir.exists():
            print("‚ùå Error: Not in a git repository")
            return False

        # Run all setup steps
        success = all(
            [
                self.create_pre_push_hook(),
                self.setup_git_aliases(),
                self.configure_submodule_tracking(),
                self.setup_local_config(),
            ]
        )

        if success:
            print("\n‚úÖ Git submodule configuration complete!")
            print("\nAvailable commands:")
            print("  git sall      - Show status of parent repo and all submodules")
            print("  git addall    - Add all changes in parent repo and submodules")
            print("  git pushall   - Commit and push parent repo and all submodules")
            print("  git pullall   - Pull parent repo and update all submodules")
            print(
                "\nThe pre-push hook will automatically check submodules before pushing."
            )
        else:
            print("\n‚ùå Some setup steps failed")

        return success


def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Setup git submodule configuration")
    parser.add_argument(
        "--project-root",
        type=Path,
        help="Project root directory (default: current directory)",
    )

    args = parser.parse_args()

    setup = GitSubmoduleSetup(project_root=args.project_root)
    success = setup.run_setup()

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
