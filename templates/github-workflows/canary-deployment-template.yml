# Canary Deployment Template
# Progressive deployment strategy for staging environments
# Gradually shifts traffic to new version with automatic rollback on errors

name: Canary Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - staging-2
        default: staging
      initial_percentage:
        description: 'Initial canary traffic percentage'
        required: true
        type: choice
        options:
          - '5'
          - '10'
          - '25'
        default: '10'
      increment_percentage:
        description: 'Traffic increment per step'
        required: true
        type: choice
        options:
          - '10'
          - '20'
          - '25'
        default: '20'
      bake_time:
        description: 'Minutes to wait between traffic shifts'
        required: true
        type: choice
        options:
          - '5'
          - '10'
          - '15'
        default: '10'
      error_threshold:
        description: 'Error rate threshold % to trigger rollback'
        required: true
        type: string
        default: '5'
      latency_threshold:
        description: 'Latency threshold in ms to trigger rollback'
        required: true
        type: string
        default: '1000'

concurrency:
  group: canary-${{ github.event.inputs.environment }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20.x'
  AWS_REGION: us-east-1

jobs:
  # Prepare canary deployment
  prepare:
    name: Prepare Canary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      deployment_id: ${{ steps.prep.outputs.deployment_id }}
      baseline_metrics: ${{ steps.baseline.outputs.metrics }}
      current_version: ${{ steps.prep.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare deployment
        id: prep
        run: |
          DEPLOYMENT_ID="canary-${{ github.event.inputs.environment }}-$(date +%Y%m%d%H%M%S)"
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
          
          # Get current version
          FUNCTION_NAME="${{ secrets.LAMBDA_FUNCTION_NAME }}-${{ github.event.inputs.environment }}"
          CURRENT_VERSION=$(aws lambda get-alias \
            --function-name ${FUNCTION_NAME} \
            --name LIVE \
            --query 'FunctionVersion' \
            --output text)
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Collect baseline metrics
        id: baseline
        run: |
          FUNCTION_NAME="${{ secrets.LAMBDA_FUNCTION_NAME }}-${{ github.event.inputs.environment }}"
          
          # Collect baseline metrics for comparison
          ERROR_RATE=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/Lambda \
            --metric-name Errors \
            --dimensions Name=FunctionName,Value=${FUNCTION_NAME} \
            --statistics Average \
            --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
            --period 3600 \
            --query 'Datapoints[0].Average' \
            --output text)
          
          LATENCY=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/Lambda \
            --metric-name Duration \
            --dimensions Name=FunctionName,Value=${FUNCTION_NAME} \
            --statistics Average \
            --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
            --period 3600 \
            --query 'Datapoints[0].Average' \
            --output text)
          
          echo "metrics={\"error_rate\": \"${ERROR_RATE:-0}\", \"latency\": \"${LATENCY:-100}\"}" >> $GITHUB_OUTPUT

  # Build and test
  build-test:
    name: Build and Test
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      new_version: ${{ steps.deploy.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build and test
        run: |
          npm ci
          npm test
          npm run build:${{ github.event.inputs.environment }}

      - name: Package Lambda
        run: |
          cd src/lambda
          npm ci
          npm run build
          cd dist
          zip -r ../../../lambda-deployment.zip .

      - name: Deploy new version
        id: deploy
        run: |
          FUNCTION_NAME="${{ secrets.LAMBDA_FUNCTION_NAME }}-${{ github.event.inputs.environment }}"
          
          # Upload and publish new version
          aws lambda update-function-code \
            --function-name ${FUNCTION_NAME} \
            --zip-file fileb://lambda-deployment.zip \
            --publish
          
          NEW_VERSION=$(aws lambda list-versions-by-function \
            --function-name ${FUNCTION_NAME} \
            --query 'Versions[-1].Version' \
            --output text)
          
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Create CANARY alias for new version
          aws lambda create-alias \
            --function-name ${FUNCTION_NAME} \
            --name CANARY \
            --function-version ${NEW_VERSION} \
            2>/dev/null || \
          aws lambda update-alias \
            --function-name ${FUNCTION_NAME} \
            --name CANARY \
            --function-version ${NEW_VERSION}

  # Progressive canary deployment
  canary-rollout:
    name: Canary Rollout
    needs: [prepare, build-test]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Progressive traffic shift
        run: |
          FUNCTION_NAME="${{ secrets.LAMBDA_FUNCTION_NAME }}-${{ github.event.inputs.environment }}"
          NEW_VERSION="${{ needs.build-test.outputs.new_version }}"
          CURRENT_VERSION="${{ needs.prepare.outputs.current_version }}"
          
          INITIAL_PERCENTAGE=${{ github.event.inputs.initial_percentage }}
          INCREMENT=${{ github.event.inputs.increment_percentage }}
          BAKE_TIME=${{ github.event.inputs.bake_time }}
          ERROR_THRESHOLD=${{ github.event.inputs.error_threshold }}
          LATENCY_THRESHOLD=${{ github.event.inputs.latency_threshold }}
          
          # Progressive rollout loop
          CURRENT_PERCENTAGE=$INITIAL_PERCENTAGE
          
          while [ $CURRENT_PERCENTAGE -le 100 ]; do
            echo "Shifting ${CURRENT_PERCENTAGE}% traffic to canary..."
            
            if [ $CURRENT_PERCENTAGE -eq 100 ]; then
              # Final shift - all traffic to new version
              aws lambda update-alias \
                --function-name ${FUNCTION_NAME} \
                --name LIVE \
                --function-version ${NEW_VERSION}
            else
              # Weighted routing
              WEIGHT=$(printf "%.2f" $(echo "scale=2; $CURRENT_PERCENTAGE / 100" | bc))
              
              aws lambda update-alias \
                --function-name ${FUNCTION_NAME} \
                --name LIVE \
                --function-version ${CURRENT_VERSION} \
                --routing-config AdditionalVersionWeights={\"${NEW_VERSION}\"=${WEIGHT}}
            fi
            
            # Bake period - monitor metrics
            echo "Monitoring canary for ${BAKE_TIME} minutes..."
            MONITOR_END=$(($(date +%s) + (BAKE_TIME * 60)))
            
            while [ $(date +%s) -lt $MONITOR_END ]; do
              sleep 60
              
              # Check error rate
              ERROR_RATE=$(aws cloudwatch get-metric-statistics \
                --namespace AWS/Lambda \
                --metric-name Errors \
                --dimensions Name=FunctionName,Value=${FUNCTION_NAME} Name=Resource,Value=${FUNCTION_NAME}:${NEW_VERSION} \
                --statistics Average \
                --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
                --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
                --period 300 \
                --query 'Datapoints[0].Average' \
                --output text)
              
              # Check latency
              LATENCY=$(aws cloudwatch get-metric-statistics \
                --namespace AWS/Lambda \
                --metric-name Duration \
                --dimensions Name=FunctionName,Value=${FUNCTION_NAME} Name=Resource,Value=${FUNCTION_NAME}:${NEW_VERSION} \
                --statistics Average \
                --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
                --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
                --period 300 \
                --query 'Datapoints[0].Average' \
                --output text)
              
              # Check thresholds
              if [[ "${ERROR_RATE:-0}" != "None" ]] && (( $(echo "${ERROR_RATE} > ${ERROR_THRESHOLD}" | bc -l) )); then
                echo "::error::Error rate ${ERROR_RATE}% exceeds threshold ${ERROR_THRESHOLD}%"
                exit 1
              fi
              
              if [[ "${LATENCY:-0}" != "None" ]] && (( $(echo "${LATENCY} > ${LATENCY_THRESHOLD}" | bc -l) )); then
                echo "::error::Latency ${LATENCY}ms exceeds threshold ${LATENCY_THRESHOLD}ms"
                exit 1
              fi
              
              echo "Metrics OK - Errors: ${ERROR_RATE:-0}%, Latency: ${LATENCY:-0}ms"
            done
            
            # Increment traffic
            if [ $CURRENT_PERCENTAGE -lt 100 ]; then
              CURRENT_PERCENTAGE=$((CURRENT_PERCENTAGE + INCREMENT))
              if [ $CURRENT_PERCENTAGE -gt 100 ]; then
                CURRENT_PERCENTAGE=100
              fi
            else
              break
            fi
          done
          
          echo "✅ Canary deployment completed successfully!"

  # Automated rollback
  rollback:
    name: Automated Rollback
    needs: [prepare, build-test, canary-rollout]
    if: failure()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Execute rollback
        run: |
          FUNCTION_NAME="${{ secrets.LAMBDA_FUNCTION_NAME }}-${{ github.event.inputs.environment }}"
          PREVIOUS_VERSION="${{ needs.prepare.outputs.current_version }}"
          
          echo "🔄 Rolling back to version ${PREVIOUS_VERSION}..."
          
          # Immediate rollback - all traffic to previous version
          aws lambda update-alias \
            --function-name ${FUNCTION_NAME} \
            --name LIVE \
            --function-version ${PREVIOUS_VERSION} \
            --routing-config AdditionalVersionWeights={}
          
          # Delete canary alias
          aws lambda delete-alias \
            --function-name ${FUNCTION_NAME} \
            --name CANARY || true
          
          echo "✅ Rollback completed"

      - name: Rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "⚠️ Canary Deployment Rolled Back",
              "attachments": [{
                "color": "warning",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ github.event.inputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Rolled back to",
                    "value": "${{ needs.prepare.outputs.current_version }}",
                    "short": true
                  }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup
  cleanup:
    name: Cleanup
    needs: [build-test, canary-rollout]
    if: success()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup canary resources
        run: |
          FUNCTION_NAME="${{ secrets.LAMBDA_FUNCTION_NAME }}-${{ github.event.inputs.environment }}"
          
          # Remove canary alias
          aws lambda delete-alias \
            --function-name ${FUNCTION_NAME} \
            --name CANARY || true
          
          # Update monitoring dashboard
          echo "Canary deployment metrics would be archived here"