# PR Checks Workflow Template
# Use this template for pull request validation workflows
# Includes: linting, tests, security checks, and automated feedback

name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

# Cancel in-progress runs when a new commit is pushed to the same PR
# This saves CI resources and provides faster feedback
concurrency:
  group: pr-checks-${{ github.head_ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  # Add other environment variables as needed

jobs:
  # Commit message validation
  commitlint:
    name: Commit Message Check
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Commit checks are quick
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v5

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Linting should be fast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run formatter check
        run: npm run format:check || npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Type checking
        run: npm run typecheck || npx tsc --noEmit

  # Unit and integration tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Standard test timeout
    strategy:
      matrix:
        # Optional: Test on multiple Node versions
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run test:coverage || npm test -- --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Security scans should be quick
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm audit --production --audit-level=high || echo "::warning::npm audit found vulnerabilities"

  # Build validation
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Builds can take longer
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Validate build output
        run: |
          # Add build validation checks here
          # Example: Check if build directory exists
          if [ ! -d "dist" ] && [ ! -d "build" ] && [ ! -d ".next" ]; then
            echo "::error::Build output directory not found"
            exit 1
          fi

  # Optional: Documentation validation
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Doc checks are quick
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation
        run: |
          # Ensure README exists
          if [ ! -f "README.md" ]; then
            echo "::error::README.md is missing"
            exit 1
          fi

      - name: Check for broken links
        uses: lycheeverse/lychee-action@v1
        with:
          fail: false
          args: --verbose --no-progress '*.md' 'docs/**/*.md'

  # Summary comment on PR
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5  # API calls are quick
    needs: [commitlint, code-quality, tests, security, build]
    if: always()
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## PR Check Results')
            );
            
            const body = `## PR Check Results
            
            | Check | Status |
            |-------|--------|
            | Commit Messages | ${{ needs.commitlint.result }} |
            | Code Quality | ${{ needs.code-quality.result }} |
            | Tests | ${{ needs.tests.result }} |
            | Security | ${{ needs.security.result }} |
            | Build | ${{ needs.build.result }} |
            
            _Last updated: ${new Date().toISOString()}_`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }